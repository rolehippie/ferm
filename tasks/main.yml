---
- name: Install required packages
  loop:
    - ferm
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  tags:
    - ferm

- name: Create required directories
  loop: "{{ ferm_general_dirs + ferm_group_dirs + ferm_host_dirs }}"
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
    state: directory
  tags:
    - ferm

- name: Write default config
  notify:
    - Restart ferm
  ansible.builtin.template:
    src: default.j2
    dest: /etc/default/ferm
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - ferm

- name: Write general config
  notify:
    - Restart ferm
  ansible.builtin.template:
    src: config.j2
    dest: /etc/ferm/ferm.conf
    owner: root
    group: adm
    mode: u=rw,g=r,o=r
  tags:
    - ferm

- name: Rules from content
  loop: "{{ ferm_general_rules + ferm_group_rules + ferm_host_rules }}"
  loop_control:
    label: "{{ item.type | default('ferm') }}: {{ item.name }}"
  when:
    - false if item.content is not defined else (item.content | length > 0)
    - true if item.state is not defined else item.state == "present"
  notify:
    - Restart ferm
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "/etc/ferm/{{ item.type | default('ferm') }}.d/{{ item.weight | default(ferm_default_weight) }}_{{ item.name }}.ferm"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - ferm

- name: Rules from templates
  loop: "{{ ferm_general_rules + ferm_group_rules + ferm_host_rules }}"
  loop_control:
    label: "{{ item.type | default('ferm') }}: {{ item.name }}"
  when:
    - false if item.src is not defined else (item.src | length > 0)
    - true if item.state is not defined else item.state == "present"
  notify:
    - Restart ferm
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/etc/ferm/{{ item.type | default('ferm') }}.d/{{ item.weight | default(ferm_default_weight) }}_{{ item.name }}.ferm"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - ferm

- name: Delete rule files
  loop: "{{ ferm_general_rules + ferm_group_rules + ferm_host_rules }}"
  loop_control:
    label: "{{ item.type | default('ferm') }}: {{ item.name }}"
  when:
    - false if item.state is not defined else item.state == "absent"
  notify:
    - Restart ferm
  ansible.builtin.file:
    path: "/etc/ferm/{{ item.type | default('ferm') }}.d/{{ item.weight | default(ferm_default_weight) }}_{{ item.name }}.ferm"
    state: absent
  tags:
    - ferm

- name: Hooks from content
  loop: "{{ ferm_general_hooks + ferm_extra_hooks }}"
  loop_control:
    label: "{{ item.type | default('unknown') }}: {{ item.name }}"
  when:
    - false if item.content is not defined else (item.content | length > 0)
    - true if item.state is not defined else item.state == "present"
  notify:
    - Restart ferm
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "/etc/ferm/{{ item.type | mandatory }}.d/{{ item.weight | default(ferm_default_weight) }}_{{ item.name }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=r
  tags:
    - ferm

- name: Hooks from templates
  loop: "{{ ferm_general_hooks + ferm_extra_hooks }}"
  loop_control:
    label: "{{ item.type | default('unknown') }}: {{ item.name }}"
  when:
    - false if item.src is not defined else (item.src | length > 0)
    - true if item.state is not defined else item.state == "present"
  notify:
    - Restart ferm
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/etc/ferm/{{ item.type | mandatory }}.d/{{ item.weight | default(ferm_default_weight) }}_{{ item.name }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=r
  tags:
    - ferm

- name: Delete hook files
  loop: "{{ ferm_general_hooks + ferm_extra_hooks }}"
  loop_control:
    label: "{{ item.type | default('unknown') }}: {{ item.name }}"
  when:
    - false if item.state is not defined else item.state == "absent"
  notify:
    - Restart ferm
  ansible.builtin.file:
    path: "/etc/ferm/{{ item.type | mandatory }}.d/{{ item.weight | default(ferm_default_weight) }}_{{ item.name }}"
    state: absent
  tags:
    - ferm

- name: Start ferm service
  ansible.builtin.systemd:
    name: ferm
    state: "{{ 'started' if ferm_enabled else 'stopped' }}"
    daemon_reload: true
    masked: false
    enabled: "{{ true if ferm_enabled else false }}"
  tags:
    - ferm

...
